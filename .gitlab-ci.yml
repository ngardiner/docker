stages:
  - get-versions
  - build
  - release

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_NAME: "vouch-proxy"
  DOCKERFILE_PATH: "vouch-proxy/Dockerfile"

# Get all vouch-proxy versions
get-vouch-versions:
  stage: get-versions
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    # Get all tags from vouch-proxy repo, filter for version tags
    - |
      VERSIONS=$(curl -s "https://api.github.com/repos/vouch/vouch-proxy/tags" | \
        jq -r '.[].name' | \
        grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | \
        head -20)
      echo "Found vouch-proxy versions:"
      echo "$VERSIONS"
      # Save versions to file for next stage
      echo "$VERSIONS" > vouch_versions.txt
  artifacts:
    paths:
      - vouch_versions.txt
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - vouch-proxy/**/*
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+.*$/
      changes:
        - vouch-proxy/**/*

# Build and push Docker images for all vouch-proxy versions
docker-build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    # Install buildx
    - docker buildx create --use --name multiarch --driver docker-container
    - docker buildx inspect --bootstrap
    # Login to DockerHub
    - echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    # Build and push multi-architecture image for each vouch version
    - |
      FIRST_VERSION=$(head -n1 vouch_versions.txt)
      
      while IFS= read -r version; do
        if [ -n "$version" ]; then
          echo "Building Docker image for vouch-proxy version: $version"
          
          # Determine tags for this version
          TAGS="--tag $DOCKERHUB_USERNAME/$IMAGE_NAME:$version"
          
          # Tag the first (newest) version as latest too
          if [ "$version" = "$FIRST_VERSION" ]; then
            TAGS="$TAGS --tag $DOCKERHUB_USERNAME/$IMAGE_NAME:latest"
            echo "This version will also be tagged as 'latest'"
          fi
          
          # Build and push the image
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --build-arg VOUCH_VERSION="$version" \
            $TAGS \
            --push \
            --file "$DOCKERFILE_PATH" \
            vouch-proxy/
          
          echo "Successfully built and pushed $DOCKERHUB_USERNAME/$IMAGE_NAME:$version"
        fi
      done < vouch_versions.txt
      
      echo "All vouch-proxy versions built and pushed successfully!"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - vouch-proxy/**/*
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+.*$/
      changes:
        - vouch-proxy/**/*
  tags:
    - docker
  needs:
    - get-vouch-versions

# Create GitLab release for version tags
create-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: |
      ## Vouch Proxy Docker Image Release $CI_COMMIT_TAG
      
      This release provides multi-architecture Docker images for vouch-proxy.
      
      ### Supported Architectures
      - linux/amd64
      - linux/arm64
      - linux/arm/v7
      
      ### Docker Images
      - `$DOCKERHUB_USERNAME/$IMAGE_NAME:$CI_COMMIT_TAG`
      - `$DOCKERHUB_USERNAME/$IMAGE_NAME:latest` (for latest release)
      
      ### Usage
      ```bash
      docker run -p 9090:9090 $DOCKERHUB_USERNAME/$IMAGE_NAME:$CI_COMMIT_TAG
      ```
      
      Built from vouch-proxy version: $CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+.*$/

# Test build without pushing (for MRs only)
test-build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker buildx create --use --name multiarch --driver docker-container
    - docker buildx inspect --bootstrap
  script:
    - |
      echo "Testing build with latest vouch-proxy version"
      docker buildx build \
        --platform linux/amd64,linux/arm64,linux/arm/v7 \
        --build-arg VOUCH_VERSION="latest" \
        --tag "test-$IMAGE_NAME:$CI_COMMIT_SHORT_SHA" \
        --file "$DOCKERFILE_PATH" \
        vouch-proxy/
      echo "Test build completed successfully"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - vouch-proxy/**/*
  tags:
    - docker